module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateHero {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Hero {
  id: Int!
  age: String!
  name: String!
}

type HeroConnection {
  pageInfo: PageInfo!
  edges: [HeroEdge]!
  aggregate: AggregateHero!
}

input HeroCreateInput {
  id: Int
  age: String!
  name: String!
}

type HeroEdge {
  node: Hero!
  cursor: String!
}

enum HeroOrderByInput {
  id_ASC
  id_DESC
  age_ASC
  age_DESC
  name_ASC
  name_DESC
}

type HeroPreviousValues {
  id: Int!
  age: String!
  name: String!
}

type HeroSubscriptionPayload {
  mutation: MutationType!
  node: Hero
  updatedFields: [String!]
  previousValues: HeroPreviousValues
}

input HeroSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HeroWhereInput
  AND: [HeroSubscriptionWhereInput!]
  OR: [HeroSubscriptionWhereInput!]
  NOT: [HeroSubscriptionWhereInput!]
}

input HeroUpdateInput {
  age: String
  name: String
}

input HeroUpdateManyMutationInput {
  age: String
  name: String
}

input HeroWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  age: String
  age_not: String
  age_in: [String!]
  age_not_in: [String!]
  age_lt: String
  age_lte: String
  age_gt: String
  age_gte: String
  age_contains: String
  age_not_contains: String
  age_starts_with: String
  age_not_starts_with: String
  age_ends_with: String
  age_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [HeroWhereInput!]
  OR: [HeroWhereInput!]
  NOT: [HeroWhereInput!]
}

input HeroWhereUniqueInput {
  id: Int
}

scalar Long

type Mutation {
  createHero(data: HeroCreateInput!): Hero!
  updateHero(data: HeroUpdateInput!, where: HeroWhereUniqueInput!): Hero
  updateManyHeroes(data: HeroUpdateManyMutationInput!, where: HeroWhereInput): BatchPayload!
  upsertHero(where: HeroWhereUniqueInput!, create: HeroCreateInput!, update: HeroUpdateInput!): Hero!
  deleteHero(where: HeroWhereUniqueInput!): Hero
  deleteManyHeroes(where: HeroWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  hero(where: HeroWhereUniqueInput!): Hero
  heroes(where: HeroWhereInput, orderBy: HeroOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hero]!
  heroesConnection(where: HeroWhereInput, orderBy: HeroOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HeroConnection!
  node(id: ID!): Node
}

type Subscription {
  hero(where: HeroSubscriptionWhereInput): HeroSubscriptionPayload
}
`
      }
    